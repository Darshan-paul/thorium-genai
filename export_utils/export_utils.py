# export_utils.py - Export functionality for PDF, Excel, and API
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from plotly.utils import PlotlyJSONEncoder
import json
import base64
from datetime import datetime
import io
import os
from database import db_manager

# PDF Generation
try:
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.lib import colors
    from reportlab.graphics.shapes import Drawing
    from reportlab.graphics.charts.linecharts import HorizontalLineChart
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False

class ExportManager:
    def __init__(self):
        self.temp_dir = "temp_exports"
        if not os.path.exists(self.temp_dir):
            os.makedirs(self.temp_dir)
    
    def generate_pdf_report(self, user_id, data, report_type="simulation"):
        """Generate PDF report"""
        if not REPORTLAB_AVAILABLE:
            return None, "ReportLab not available. Install with: pip install reportlab"
        
        try:
            # Create PDF document
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"thorium_report_{report_type}_{timestamp}.pdf"
            filepath = os.path.join(self.temp_dir, filename)
            
            doc = SimpleDocTemplate(filepath, pagesize=A4)
            styles = getSampleStyleSheet()
            story = []
            
            # Title
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Heading1'],
                fontSize=24,
                spaceAfter=30,
                textColor=colors.HexColor('#1f77b4')
            )
            
            story.append(Paragraph("âš¡ Thorium GenAI Report", title_style))
            story.append(Paragraph(f"Report Type: {report_type.title()}", styles['Heading2']))
            story.append(Paragraph(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", styles['Normal']))
            story.append(Spacer(1, 20))
            
            # Executive Summary
            story.append(Paragraph("Executive Summary", styles['Heading2']))
            summary_text = f"""
            This report contains {report_type} analysis generated using Thorium GenAI platform. 
            The data represents key insights into thorium-based nuclear energy solutions for India's clean energy transition.
            """
            story.append(Paragraph(summary_text, styles['Normal']))
            story.append(Spacer(1, 20))
            
            # Data tables
            if 'metrics' in data:
                story.append(Paragraph("Key Metrics", styles['Heading2']))
                metrics_data = [['Metric', 'Value', 'Unit']]
                for metric, value in data['metrics'].items():
                    metrics_data.append([metric, str(value['value']), value.get('unit', '')])
                
                metrics_table = Table(metrics_data)
                metrics_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1f77b4')),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 12),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black)
                ]))
                
                story.append(metrics_table)
                story.append(Spacer(1, 20))
            
            # Insights
            if 'insights' in data:
                story.append(Paragraph("Key Insights", styles['Heading2']))
                for insight in data['insights']:
                    story.append(Paragraph(f"â€¢ {insight}", styles['Normal']))
                story.append(Spacer(1, 20))
            
            # Footer
            story.append(Spacer(1, 30))
            footer_text = "Generated by Thorium GenAI - Empowering India's Clean Energy Future"
            story.append(Paragraph(footer_text, styles['Normal']))
            
            # Build PDF
            doc.build(story)
            
            # Log export
            db_manager.log_export(user_id, "PDF", filename, filepath, data)
            
            return filepath, None
            
        except Exception as e:
            return None, f"PDF generation failed: {str(e)}"
    
    def generate_excel_export(self, user_id, data, export_type="simulation"):
        """Generate Excel export"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"thorium_data_{export_type}_{timestamp}.xlsx"
            filepath = os.path.join(self.temp_dir, filename)
            
            with pd.ExcelWriter(filepath, engine='openpyxl') as writer:
                # Summary sheet
                summary_data = {
                    'Parameter': [],
                    'Value': [],
                    'Unit': [],
                    'Description': []
                }
                
                if 'metrics' in data:
                    for metric, value in data['metrics'].items():
                        summary_data['Parameter'].append(metric)
                        summary_data['Value'].append(value['value'])
                        summary_data['Unit'].append(value.get('unit', ''))
                        summary_data['Description'].append(value.get('description', ''))
                
                summary_df = pd.DataFrame(summary_data)
                summary_df.to_excel(writer, sheet_name='Summary', index=False)
                
                # Detailed data sheet
                if 'detailed_data' in data:
                    detailed_df = pd.DataFrame(data['detailed_data'])
                    detailed_df.to_excel(writer, sheet_name='Detailed_Data', index=False)
                
                # Simulation parameters
                if 'parameters' in data:
                    params_df = pd.DataFrame(list(data['parameters'].items()), columns=['Parameter', 'Value'])
                    params_df.to_excel(writer, sheet_name='Parameters', index=False)
                
                # Chart data
                if 'chart_data' in data:
                    chart_df = pd.DataFrame(data['chart_data'])
                    chart_df.to_excel(writer, sheet_name='Chart_Data', index=False)
            
            # Log export
            db_manager.log_export(user_id, "Excel", filename, filepath, data)
            
            return filepath, None
            
        except Exception as e:
            return None, f"Excel generation failed: {str(e)}"
    
    def generate_json_api(self, user_id, data, export_type="simulation"):
        """Generate JSON API response"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"thorium_api_{export_type}_{timestamp}.json"
            filepath = os.path.join(self.temp_dir, filename)
            
            api_response = {
                "status": "success",
                "timestamp": datetime.now().isoformat(),
                "export_type": export_type,
                "data": data,
                "metadata": {
                    "generated_by": "Thorium GenAI",
                    "version": "1.0",
                    "user_id": user_id
                }
            }
            
            with open(filepath, 'w') as f:
                json.dump(api_response, f, indent=2, cls=PlotlyJSONEncoder)
            
            # Log export
            db_manager.log_export(user_id, "JSON", filename, filepath, data)
            
            return filepath, None
            
        except Exception as e:
            return None, f"JSON generation failed: {str(e)}"
    
    def get_file_download_link(self, filepath, filename, file_type="application/octet-stream"):
        """Generate download link for file"""
        try:
            with open(filepath, "rb") as f:
                file_data = f.read()
            
            b64_data = base64.b64encode(file_data).decode()
            href = f'<a href="data:{file_type};base64,{b64_data}" download="{filename}">ðŸ“¥ Download {filename}</a>'
            
            return href
        except Exception as e:
            return f"Error generating download link: {str(e)}"

# Initialize export manager
export_manager = ExportManager()

def show_export_options(user_id, data, export_type="simulation"):
    """Show export options in Streamlit"""
    st.markdown("### ðŸ“Š Export Options")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("ðŸ“„ Generate PDF Report", type="primary"):
            with st.spinner("Generating PDF report..."):
                filepath, error = export_manager.generate_pdf_report(user_id, data, export_type)
                if filepath:
                    download_link = export_manager.get_file_download_link(
                        filepath, f"thorium_report_{export_type}.pdf", "application/pdf"
                    )
                    st.markdown(download_link, unsafe_allow_html=True)
                    st.success("PDF report generated successfully!")
                else:
                    st.error(error)
    
    with col2:
        if st.button("ðŸ“Š Export to Excel"):
            with st.spinner("Generating Excel file..."):
                filepath, error = export_manager.generate_excel_export(user_id, data, export_type)
                if filepath:
                    download_link = export_manager.get_file_download_link(
                        filepath, f"thorium_data_{export_type}.xlsx", 
                        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
                    st.markdown(download_link, unsafe_allow_html=True)
                    st.success("Excel file generated successfully!")
                else:
                    st.error(error)
    
    with col3:
        if st.button("ðŸ”— Generate API JSON"):
            with st.spinner("Generating JSON API..."):
                filepath, error = export_manager.generate_json_api(user_id, data, export_type)
                if filepath:
                    download_link = export_manager.get_file_download_link(
                        filepath, f"thorium_api_{export_type}.json", "application/json"
                    )
                    st.markdown(download_link, unsafe_allow_html=True)
                    st.success("JSON API generated successfully!")
                else:
                    st.error(error)

def prepare_simulation_data(simulation_type, parameters, results):
    """Prepare data for export"""
    data = {
        "metrics": {},
        "parameters": parameters,
        "results": results,
        "insights": [],
        "chart_data": {},
        "detailed_data": {}
    }
    
    if simulation_type == "reactor":
        data["metrics"] = {
            "Total Energy Output": {"value": results.get("total_output", 0), "unit": "GWh", "description": "Total energy produced over reactor lifetime"},
            "Yearly Output": {"value": results.get("yearly_output", 0), "unit": "GWh/year", "description": "Annual energy production"},
            "COâ‚‚ Saved": {"value": results.get("co2_saved", 0), "unit": "tons", "description": "COâ‚‚ emissions avoided"},
            "Efficiency": {"value": parameters.get("efficiency", 0), "unit": "%", "description": "Reactor thermal efficiency"}
        }
        
        data["insights"] = [
            "Thorium reactors provide clean, abundant energy for India",
            "High efficiency leads to better resource utilization",
            "Significant COâ‚‚ reduction compared to fossil fuels"
        ]
        
    elif simulation_type == "policy":
        data["metrics"] = {
            "COâ‚‚ Reduction": {"value": results.get("co2_reduction", 0), "unit": "MtCOâ‚‚/year", "description": "Annual COâ‚‚ emissions reduction"},
            "Energy Cost Savings": {"value": results.get("energy_cost_savings", 0), "unit": "Billion USD/year", "description": "Economic benefits from clean energy"},
            "Jobs Created": {"value": results.get("job_creation", 0), "unit": "Million", "description": "Employment opportunities created"}
        }
        
        data["insights"] = [
            "Comprehensive policy approach maximizes impact",
            "Clean energy transition creates economic opportunities",
            "India can become a global leader in thorium technology"
        ]
    
    return data
